#include <iostream>
#include <vector>
using namespace std;

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    // Ensure nums1 is always the smaller array
    if (nums1.size() > nums2.size()) {
        return findMedianSortedArrays(nums2, nums1);
    }

    int x = nums1.size();
    int y = nums2.size();
    int low = 0, high = x;

    while (low <= high) {
        int partitionX = (low + high) / 2;
        int partitionY = (x + y + 1) / 2 - partitionX;

        // Edge cases: Use INT_MIN and INT_MAX for out-of-bound indices
        int left1 = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
        int right1 = (partitionX == x) ? INT_MAX : nums1[partitionX];

        int left2 = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
        int right2 = (partitionY == y) ? INT_MAX : nums2[partitionY];

        // Correct partition found
        if (left1 <= right2 && left2 <= right1) {
            // Odd length: max(left1, left2)
            if ((x + y) % 2 == 1) {
                return max(left1, left2);
            }
            // Even length: avg of max(left1, left2) and min(right1, right2)
            return (max(left1, left2) + min(right1, right2)) / 2.0;
        }
        // Move towards the left in nums1
        else if (left1 > right2) {
            high = partitionX - 1;
        }
        // Move towards the right in nums1
        else {
            low = partitionX + 1;
        }
    }
    return -1; // Should never reach here
}

int main() {
    vector<int> nums1 = {1, 3};
    vector<int> nums2 = {2};

    double median = findMedianSortedArrays(nums1, nums2);
    cout << "Median: " << median << endl;

    return 0;
}
